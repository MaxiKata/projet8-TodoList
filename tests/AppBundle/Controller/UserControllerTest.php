<?php


namespace Tests\AppBundle\Controller;

use AppBundle\Entity\User;
use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\Persistence\ObjectRepository;
use Doctrine\ORM\EntityManager;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

class UserControllerTest extends WebTestCase
{
    use LogTrait, CreateTrait;

    private $client;

    /**
     * {@inheritDoc}
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = static::createClient(array(), array(
            'PHP_AUTH_USER' => 'Admin',
            'PHP_AUTH_PW'   => 'hihi'
        ));
        $this->loadFixturesForTests();
    }

    public function testGetCreateUserPage()
    {
        $client = static::createClient();
        $client->request('GET', '/users/create');
        $this->assertEquals(200, $client->getResponse()->getStatusCode());
    }

    /**
     *
     */
    public function testCreateUser()
    {
        $client = static::createClient();

        // Request the route
        $crawler = $client->request('GET', '/users/create');
        // Test
        $this->assertEquals(
            1,
            $crawler->filter('form')->count()
        );
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        // Select the form
        $form = $crawler->selectButton('Ajouter')->form();
        // set some values
        $form['user[username]'] = 'userTest';
        $form['user[password][first]'] = 'Aa@123';
        $form['user[password][second]'] = 'Aa@123';
        $form['user[email]'] = 'userTest@test.com';
        $form['user[roles]'] = 'ROLE_USER';
        // submit the form
        $client->submit($form);
        // Test
        $this->assertTrue($client->getResponse()->isRedirect());
    }

    /**
     * Test d'un nouvel utilisateur avec un email déjà Existant en BDD
     */
    public function testCreateUserEmailUsed()
    {
        $client = static::createClient();

        // Request the route
        $crawler = $client->request('GET', '/users/create');
        // Test
        $this->assertEquals(
            1,
            $crawler->filter('form')->count()
        );
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        // Select the form
        $form = $crawler->selectButton('Ajouter')->form();
        // set some values
        $form['user[username]'] = 'User';
        $form['user[password][first]'] = 'Aa@123';
        $form['user[password][second]'] = 'Aa@123';
        $form['user[email]'] = 'test@test.com';
        $form['user[roles]'] = 'ROLE_USER';
        // submit the form
        $crawler = $client->submit($form);
        // Test

        $this->assertSame(1, $crawler->filter('span.help-block')->count());
    }

    /**
     * Test d'un nouvel utilisateur avec un email déjà Existant en BDD
     */
    public function testCreateUsernameUsed()
    {
        $client = static::createClient();

        // Request the route
        $crawler = $client->request('GET', '/users/create');
        // Test
        $this->assertEquals(
            1,
            $crawler->filter('form')->count()
        );
        $this->assertTrue($client->getResponse()->isSuccessful());
        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        // Select the form
        $form = $crawler->selectButton('Ajouter')->form();
        // set some values
        $form['user[username]'] = 'User';
        $form['user[password][first]'] = 'Aa@123';
        $form['user[password][second]'] = 'Aa@123';
        $form['user[email]'] = 'test1@test.com';
        $form['user[roles]'] = 'ROLE_USER';
        // submit the form
        $crawler = $client->submit($form);
        // Test

        $this->assertSame(1, $crawler->filter('div.alert.alert-danger:contains("Ce nom d\'utilisateur existe déjà")')->count());
    }

    /**
     * Test de modification d'un utilisateur par un administrateur ROLE_ADMIN
     */
    public function testEditUserByAdmin()
    {
        $this->logInAdmin();

        // Call the User Repo
        $users = $this->em->getRepository(User::class)->findAll();
        $userId = $users[0]->getId();


        $uri = "/users/$userId/edit"; // Dynamic url for test
        $crawler = $this->client->request('GET', $uri); // Call the edit page
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());

        $form = $crawler->selectButton('Modifier')->form();
        $form['user[username]'] = 'user';
        $form['user[password][first]'] = 'userpassword';
        $form['user[password][second]'] = 'userpassword';
        $form['user[email]'] = 'test@test.com';
        $form['user[roles]'] = 'ROLE_USER';
        $this->client->submit($form);
        $crawler = $this->client->followRedirect();
        $this->assertSame(1, $crawler->filter('div.alert.alert-success:contains("modifié")')->count());
    }

    /**
     * Test de modification d'un utilisateur par un utilisateur ROLE_USER
     */
    public function testEditUserByUser()
    {
        $this->client = static::createClient(array(), array(
            'PHP_AUTH_USER' => 'User',
            'PHP_AUTH_PW'   => 'hihi'
        ));

        $this->logInUser();
        $users = $this->em->getRepository(User::class)->findAll();
        $userId = $users[1]->getId();


        $uri = "/users/$userId/edit"; // Dynamic url for test
        $this->client->request('GET', $uri); // Call the edit page
        $this->assertEquals(302, $this->client->getResponse()->getStatusCode());
        $crawler = $this->client->followRedirect();

        $this->assertSame(1, $crawler->filter('div.alert.alert-danger')->count());
    }


    public function testUserRouteNotAccessibleWhenNotLogged()
    {
        $client = static::createClient();

        $client->request('GET', '/users');

        $this->assertSame(302, $client->getResponse()->getStatusCode());
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}