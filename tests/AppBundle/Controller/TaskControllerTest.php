<?php


namespace Tests\AppBundle\Controller;


use AppBundle\Entity\Task;

class TaskControllerTest extends WebTestCase
{
    use LogTrait, CreateTrait;

    private $client;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = static::createClient(array(), array(
            'PHP_AUTH_USER' => 'User',
            'PHP_AUTH_PW'   => 'hihi'
        ));
        $this->loadFixturesForTests();
    }

    public function testTaskListNotConnected()
    {
        $client = static::createClient();

        $client->request('GET', '/tasks');
        // Test que la réponse renvoyé est bien une redirection et un code comme quoi la page existe mais n'a pas les droits
        $this->assertEquals(302, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->isRedirect());

        // Suis la redirection
        $crawler = $client->followRedirect();
        // Test qu'un message d'erreur s'affiche correctement pour signaler le problème
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testTaskListDoneNotConnected()
    {
        $client = static::createClient();

        $client->request('GET', '/tasks/done');
        // Test que la réponse renvoyé est bien une redirection et un code comme quoi la page existe mais n'a pas les droits
        $this->assertEquals(302, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->isRedirect());

        // Suis la redirection
        $crawler = $client->followRedirect();
        // Test qu'un message d'erreur s'affiche correctement pour signaler le problème
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testCreateNewTask()
    {
        $this->logInUser();
        // Request the route
        $crawler = $this->client->request('GET', '/tasks/create');

        // Test
        $this->assertEquals(
            1,
            $crawler->filter('form')->count()
        );
        $this->assertTrue($this->client->getResponse()->isSuccessful());
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        // Select the form
        $form = $crawler->selectButton('Ajouter')->form();
        // set some values
        $form['task[title]'] = 'A test title';
        $form['task[content]'] = 'A great content!';
        // submit the form
        $this->client->submit($form);

        $this->assertTrue($this->client->getResponse()->isRedirect());
        $crawler = $this->client->followRedirect();
        // Test
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $this->assertSame(1, $crawler->filter('.alert-success:contains("La tâche a été bien été ajoutée.")')->count());
    }

    public function testCreateNewTaskNotLogged()
    {
        $client = static::createClient();

        // Request the route
        $client->request('GET', '/tasks/create');
        // Test que la réponse renvoyé est bien une redirection et un code comme quoi la page existe mais n'a pas les droits
        $this->assertEquals(302, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->isRedirect());

        // Suis la redirection
        $crawler = $client->followRedirect();
        // Test qu'un message d'erreur s'affiche correctement pour signaler le problème
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testEditTask()
    {
        $this->client = static::createClient(array(), array(
            'PHP_AUTH_USER' => 'Admin',
            'PHP_AUTH_PW'   => 'hihi'
        ));
        $this->logInAdmin();

        // Getting all tasks
        $tasks = $this->em->getRepository(Task::class)->findAll();
        $taskId = $tasks[0]->getId();

        // Request the route
        $uri = "/tasks/$taskId/edit"; // Dynamic url for test
        $crawler = $this->client->request('GET', $uri); // Request the route

        //Test statusCode
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());

        //Select Form to edit
        $form = $crawler->selectButton('Modifier')->form();
        $form['task[title]'] = 'Ceci est un nouveau titre';
        $form['task[content]'] = 'Nouvelle description du test';
        $this->client->submit($form);
        $crawler = $this->client->followRedirect();
        // Test
        $this->assertSame(1, $crawler->filter('.alert-success:contains("La tâche a bien été modifiée")')->count());
    }

    public function testEditTaskNotConnected()
    {
        $client = static::createClient();

        // Getting all tasks
        $tasks = $this->em->getRepository(Task::class)->findAll();
        $taskId = $tasks[0]->getId();

        // Request the route
        $uri = "/tasks/$taskId/edit"; // Dynamic url for test
        $client->request('GET', $uri); // Request the route
        $this->assertSame(302, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->isRedirect());
        $crawler = $client->followRedirect();

        //Test
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testEditTaskNotOwned()
    {
        $user = $this->createUser('ROLE_USER');

        $task = $this->createTask($user);

        $this->logInUser();

        // Getting all tasks
        $tasks = $this->em->getRepository(Task::class)->findAll();

        $taskId = $tasks[1]->getId();

        // Request the route
        $uri = "/tasks/$taskId/edit"; // Dynamic url for test
        $this->client->request('GET', $uri); // Request the route
        $this->assertSame(302, $this->client->getResponse()->getStatusCode());
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $crawler = $this->client->followRedirect();

        //Test
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testCloseTask()
    {
        $this->logInUser();

        // Request the route
        $crawler = $this->client->request('GET', '/tasks');

        //Test statusCode
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());

        $form = $crawler->selectButton('Marquer comme faite')->form();
        $this->client->submit($form);

        //Test redirection
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $crawler = $this->client->followRedirect();

        //Test alerte well shown
        $this->assertSame(1, $crawler->filter('.alert-success:contains("marquée comme faite")')->count());
    }

    public function testCloseTaskNotLogged()
    {
        $client = static::createClient();

        // Getting all tasks
        $tasks = $this->em->getRepository(Task::class)->findAll();
        $taskId = $tasks[0]->getId();

        // Request the route
        $uri = "/tasks/$taskId/toggle"; // Dynamic url for test
        $client->request('GET', $uri); // Request the route
        $this->assertSame(302, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->isRedirect());
        $crawler = $client->followRedirect();

        //Test
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testReopenTask()
    {
        $this->logInUser();

        // Request the route
        $crawler = $this->client->request('GET', '/tasks');

        //Test statusCode
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());

        //Validate task

        $form = $crawler->selectButton('Marquer comme faite')->form();
        $this->client->submit($form);

        //Test redirection
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $crawler = $this->client->followRedirect();

        //Test alerte well shown
        $this->assertSame(1, $crawler->filter('.alert-success:contains("marquée comme faite")')->count());

        // Go to the route task done
        $crawler = $this->client->request('GET', '/tasks/done');

        // Get form to unClose Task
        $form = $crawler->selectButton('Marquer non terminée')->form();
        $this->client->submit($form);

        //Test redirection
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $crawler = $this->client->followRedirect();

        //Test alerte well shown
        $this->assertSame(1, $crawler->filter('.alert-success:contains("marquée comme à faire")')->count());
    }

    public function testReopenTaskNotLogged()
    {
        $client = static::createClient();

        // Getting all tasks
        $tasks = $this->em->getRepository(Task::class)->findAll();
        $taskId = $tasks[0]->getId();

        // Request the route
        $uri = "/tasks/$taskId/toggleCancel"; // Dynamic url for test
        $client->request('GET', $uri); // Request the route
        $this->assertSame(302, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->isRedirect());
        $crawler = $client->followRedirect();

        //Test
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testDeleteTask()
    {
        $this->client = static::createClient(array(), array(
            'PHP_AUTH_USER' => 'Admin',
            'PHP_AUTH_PW'   => 'hihi'
        ));
        $this->logInAdmin();

        $crawler = $this->client->request('GET', '/tasks');

        //Test statusCode
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());

        //Validate task

        $form = $crawler->selectButton('Supprimer')->form();
        $this->client->submit($form);

        //Test redirection
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $crawler = $this->client->followRedirect();

        //Test alert well shown
        $this->assertSame(1, $crawler->filter('.alert-success:contains("La tâche a bien été supprimée.")')->count());
    }

    public function testDeleteTaskNotConnected()
    {
        $client = static::createClient();

        // Getting all tasks
        $tasks = $this->em->getRepository(Task::class)->findAll();
        $taskId = $tasks[0]->getId();

        // Request the route
        $uri = "/tasks/$taskId/delete"; // Dynamic url for test
        $client->request('GET', $uri); // Request the route
        $this->assertSame(302, $client->getResponse()->getStatusCode());
        $this->assertTrue($client->getResponse()->isRedirect());
        $crawler = $client->followRedirect();

        //Test
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à accèder à cette page")')->count());
    }

    public function testDeleteTaskNotOwned()
    {
        $user = $this->createUser('ROLE_USER');

        $task = $this->createTask($user);

        $this->logInUser();

        // Getting all tasks
        $tasks = $this->em->getRepository(Task::class)->findAll();

        $taskId = $tasks[1]->getId();

        // Request the route
        $uri = "/tasks/$taskId/delete"; // Dynamic url for test
        $this->client->request('GET', $uri); // Request the route
        $this->assertSame(302, $this->client->getResponse()->getStatusCode());
        $this->assertTrue($this->client->getResponse()->isRedirect());
        $crawler = $this->client->followRedirect();

        //Test
        $this->assertSame(1, $crawler->filter('.alert-danger:contains("Vous n\'êtes pas autorisé à effectuer cette action")')->count());
    }

    /**
     * {@inheritDoc}
     */
    protected function tearDown()
    {
        parent::tearDown();
    }
}